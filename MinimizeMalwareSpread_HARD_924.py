"""
In a network of nodes, each node i is directly connected to another node j if and only if graph[i][j] = 1.

Some nodes initial are initially infected by malware.  Whenever two nodes are directly connected and at least one of those two nodes is infected by malware, both nodes will be infected by malware.  This spread of malware will continue until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network, after the spread of malware stops.

We will remove one node from the initial list.  Return the node that if removed, would minimize M(initial).  If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.

Note that if a node was removed from the initial list of infected nodes, it may still be infected later as a result of the malware spread.



Example 1:

Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0
Example 2:

Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
Output: 0
Example 3:

Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
Output: 1


Note:

1 < graph.length = graph[0].length <= 300
0 <= graph[i][j] == graph[j][i] <= 1
graph[i][i] = 1
1 <= initial.length < graph.length
0 <= initial[i] < graph.length
"""


class Solution(object):
    def minMalwareSpread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        244 ms
        """
        memory = set()
        l = len(graph)
        # 构建每条边的信息
        edge = [[] for _ in range(l)]
        for i, line in enumerate(graph):
            for j in range(i + 1, l):
                if line[j] == 1:
                    edge[i].append(j)
                    edge[j].append(i)
        # print(edge)
        # 搜索所有可以扩撒的路径
        def dfs(node, part_set):
            if node in memory:
                return part_set
            memory.add(node)
            part_set.add(node)
            for next_node in edge[node]:
                part_set = dfs(next_node, part_set)
            return part_set
        # 每个区域用字典进行记录
        dicts = {}
        for node in initial:
            if node not in memory:
                part_set = set()
                temp = dfs(node, part_set)
                for key in temp:
                    dicts[key] = len(temp)

        mark = sorted([(key, -dicts[key]) for key in initial], key=lambda a:(a[1], a[0]))
        return mark[0][0]

    def minMalwareSpread_1(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        100ms
        """
        initialSet = set(initial)
        maxNode = 0
        maxN = -1
        n = len(graph)
        for i, node in enumerate(sorted(initial)):
            l = [node, ]
            visited = set([node, ])
            result = 0
            while l:
                s = l.pop(0)
                result += 1
                for i in range(n):
                    if graph[s][i] == 1:
                        if i in visited:
                            continue
                        if i in initialSet:
                            result = 0
                            break
                        visited.add(i)
                        l.append(i)
                if result == 0:
                    break
            if result > maxN:
                maxN = result
                maxNode = node
        return maxNode





print(Solution().minMalwareSpread(graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]))
print(Solution().minMalwareSpread(graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]))
print(Solution().minMalwareSpread(graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]))