"""
(This problem is the same as Minimize Malware Spread, with the differences bolded.)

In a network of nodes, each node i is directly connected to another node j if and only if graph[i][j] = 1.

Some nodes initial are initially infected by malware.  Whenever two nodes are directly connected and at least one of those two nodes is infected by malware, both nodes will be infected by malware.  This spread of malware will continue until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network, after the spread of malware stops.

We will remove one node from the initial list, completely removing it and any connections from this node to any other node.  Return the node that if removed, would minimize M(initial).  If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.



Example 1:

Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0
Example 2:

Input: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]
Output: 1
Example 3:

Input: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]
Output: 1


Note:

1 < graph.length = graph[0].length <= 300
0 <= graph[i][j] == graph[j][i] <= 1
graph[i][i] = 1
1 <= initial.length < graph.length
0 <= initial[i] < graph.length
"""


class Solution(object):
    def minMalwareSpread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        144 ms
        """
        l = len(graph)
        # 构建每条边的信息
        edge = [[] for _ in range(l)]
        for i, line in enumerate(graph):
            for j in range(i + 1, l):
                if line[j] == 1:
                    edge[i].append(j)
                    edge[j].append(i)
        # print('edge:', edge)
        # 记录遍历的位置
        def dfs(node, memory):
            if node in memory:
                return memory
            memory.add(node)
            for next_node in edge[node]:
                memory = dfs(next_node, memory)
            return memory

        dicts = {}
        initial = set(initial)
        for remove_node in initial:
            # 删除关于该节点的信息
            for i, val in enumerate(graph[remove_node]):
                if val == 1 and i != remove_node:
                    edge[i].remove(remove_node)
                    edge[remove_node].remove(i)
            # print('cur_edge:', edge)
            memory = set()
            for start_node in initial:
                if start_node != remove_node:
                    memory = dfs(start_node, memory)
                # print('memory:', memory, 'start_node:', start_node)
            # 记录删除该节点后的扩散区域
            dicts[remove_node] = len(memory)
            # 恢复信息
            for i, val in enumerate(graph[remove_node]):
                if val == 1 and i != remove_node:
                    edge[remove_node].append(i)
                    edge[i].append(remove_node)
            # print('after_edge:', edge)
        # print('dicts:', dicts)
        mark = sorted([(key, dicts[key]) for key in initial], key=lambda a: (a[1], a[0]))
        return mark[0][0]


print(Solution().minMalwareSpread(graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]))
print(Solution().minMalwareSpread(graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]))
print(Solution().minMalwareSpread(graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]))


from collections import deque, Counter
import time

class Solution(object):
    def minMalwareSpread(self, graph, initial):
        """
        156ms
        :param graph:
        :param initial:
        :return:
        """
        n = len(graph)
        D = [set() for _ in range(n)]
        t1=time.time()
        for i in range(1,n):
            for j in range(i):
                if graph[i][j]==1:
                    D[i].add(j)
                    D[j].add(i)
        killers = [None] * n
        for i in initial:
            killers[i] = i
        for i in range(n):
            if killers[i] is None:
                q = deque([i])
                visited = set()
                danger = set()
                while q:
                    node = q.popleft()
                    if node in visited:
                        continue
                    if node in set(initial):
                        danger.add(node)
                        continue
                    visited.add(node)
                    for next_node in D[node]:
                        q.append(next_node)
                if len(danger)!=1:
                    for node in visited:
                        killers[node]=-1
                else:
                    for node in visited:
                        killers[node]=list(danger)[0]
        counts = Counter(killers)
        max_val, max_ind = -1,-1
        for i in sorted(initial):
            if counts[i]>max_val:
                max_val = counts[i]
                max_ind = i
        return max_ind