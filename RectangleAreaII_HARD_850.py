"""
e are given a list of (axis-aligned) rectangles.  Each rectangle[i] = [x1, y1, x2, y2] , where (x1, y1) are the coordinates of the bottom-left corner, and (x2, y2) are the coordinates of the top-right corner of the ith rectangle.

Find the total area covered by all rectangles in the plane.  Since the answer may be too large, return it modulo 10^9 + 7.



Example 1:

Input: [[0,0,2,2],[1,0,2,3],[1,0,3,1]]
Output: 6
Explanation: As illustrated in the picture.
Example 2:

Input: [[0,0,1000000000,1000000000]]
Output: 49
Explanation: The answer is 10^18 modulo (10^9 + 7), which is (10^9)^2 = (-7)^2 = 49.
Note:

1 <= rectangles.length <= 200
rectanges[i].length = 4
0 <= rectangles[i][j] <= 10^9
The total area covered by all rectangles will never exceed 2^63 - 1 and thus will fit in a 64-bit signed integer.

"""


class Solution(object):
    def rectangleArea(self, rectangles):
        """
        :type rectangles: List[List[int]]
        :rtype: int
        ON^2
         58 ms
        """
        # 找出所有y坐标
        ys = sorted(set([y for x1, y1, x2, y2 in rectangles for y in [y1, y2]]))
        print(len(ys))
        rectangles = sorted(rectangles, key=lambda a:(a[0], -a[2]))
        print(len(rectangles))
        y_before = 0
        area = 0
        cum_x = 0
        for count, y in enumerate(ys):
            x = []
            area += ((y - y_before)) * (cum_x )
            area %= (10 ** 9 + 7)
            cum_x = 0
            for rectangle in rectangles:
                if rectangle[1] <= y < rectangle[3]:
                    if x == []:
                        x.append(rectangle[0])
                        x.append(rectangle[2])
                    elif x and x[-1] < rectangle[0]:
                        a = x.pop()
                        b = x.pop()
                        x.append(rectangle[0])
                        x.append(rectangle[2])
                        cum_x += (a - b)
                    else:
                        x[-1] = max(x[-1], rectangle[2])
            if x:
                a = x.pop()
                b = x.pop()
                cum_x += (a - b)
            print(cum_x, area, y - y_before)
            y_before = y
        return int(area)

    def rectangleArea_1(self, rectangles):
        xs = sorted(set([x for x1, y1, x2, y2 in rectangles for x in [x1, x2]] + [0]))
        x_i = {v: i for i, v in enumerate(xs)}
        count = [0] * len(x_i)
        L = []
        for x1, y1, x2, y2 in rectangles:
            L.append([y1, x1, x2, 1])
            L.append([y2, x1, x2, -1])
        L.sort()
        cur_y = cur_x_sum = area = 0
        for y, x1, x2, sig in L:
            area += (y - cur_y) * cur_x_sum
            cur_y = y
            for i in range(x_i[x1], x_i[x2]):
                count[i] += sig
            cur_x_sum = sum(x2 - x1 if c else 0 for x1, x2, c in zip(xs, xs[1:], count))
        return area % (10 ** 9 + 7)
# print(Solution().rectangleArea([[0,0,2,2],[1,0,2,3],[1,0,3,1]]))
# print(Solution().rectangleArea([[0,0,1000000000,1000000000]]))
# print(Solution().rectangleArea([[49,40,62,100],[11,83,31,99],[19,39,30,99]]))
print(Solution().rectangleArea([[234952848,930293302,918287028,932404877],[59729554,247158300,412153217,941530685] #]))
                                   ,[826456896,31317897,977000076,114986792],[305299176,753475548,492614022,943202966]#]))
                                   ,[144009028,620829667,384514494,636553833],[101286921,334861288,765056061,759362853],[517574195,226685222,661639585,890437972],[373881839,385791639,588339315,732266782]#]))
                                ,[474465284,383846673,891929768,389591731],[377421127,444256040,569637045,844849706],[678946752,5531581,811931490,673298706],[381572471,14442420,908427712,355542822],[151574645,859751212,249204106,970715056],[898051334,160629526,898857049,300092115],[823701604,41126782,849256184,885807712],[187224835,505333139,277408629,669809644],[749059556,571994891,904742091,952967767],[116721365,61031400,230451582,564607942],[621792998,437891125,685870135,794054179],[191746044,388228381,260249539,784538268],[460227301,739506069,924242630,853941941],[503391447,400834600,557283503,681159669],[340794440,696018334,430850087,730907708],[298210528,385984975,873795712,566839708],[548645879,63982252,987490164,817649382],[682774760,28800930,746672738,343134217],[45927401,550087614,731161428,893845899],[447546836,33448471,713112993,989955771],[710102900,754201596,891649570,850999212],[352968622,508747923,521295921,869590528]]))

print(Solution().rectangleArea_1([[234952848,930293302,918287028,932404877],[59729554,247158300,412153217,941530685] #]))
                                     ,[826456896,31317897,977000076,114986792],[305299176,753475548,492614022,943202966]#]))
                                     ,[144009028,620829667,384514494,636553833],[101286921,334861288,765056061,759362853],[517574195,226685222,661639585,890437972],[373881839,385791639,588339315,732266782]#]))
                                     ,[474465284,383846673,891929768,389591731],[377421127,444256040,569637045,844849706],[678946752,5531581,811931490,673298706],[381572471,14442420,908427712,355542822],[151574645,859751212,249204106,970715056],[898051334,160629526,898857049,300092115],[823701604,41126782,849256184,885807712],[187224835,505333139,277408629,669809644],[749059556,571994891,904742091,952967767],[116721365,61031400,230451582,564607942],[621792998,437891125,685870135,794054179],[191746044,388228381,260249539,784538268],[460227301,739506069,924242630,853941941],[503391447,400834600,557283503,681159669],[340794440,696018334,430850087,730907708],[298210528,385984975,873795712,566839708],[548645879,63982252,987490164,817649382],[682774760,28800930,746672738,343134217],[45927401,550087614,731161428,893845899],[447546836,33448471,713112993,989955771],[710102900,754201596,891649570,850999212],[352968622,508747923,521295921,869590528]]))


